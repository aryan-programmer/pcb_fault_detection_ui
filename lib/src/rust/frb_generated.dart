// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/error.dart';
import 'api/model.dart';
import 'api/slicing.dart';
import 'api/utils.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMainInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 2037739718;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_pcb_fault_detection_ui',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  String crateApiErrorYoloErrorToString({required YoloError that});

  double crateApiModelYoloModelSessionAutoAccessorGetConfidenceThreshold({
    required YoloModelSession that,
  });

  MatchMetric crateApiModelYoloModelSessionAutoAccessorGetFinalMetric({
    required YoloModelSession that,
  });

  double crateApiModelYoloModelSessionAutoAccessorGetFinalMetricThreshold({
    required YoloModelSession that,
  });

  double crateApiModelYoloModelSessionAutoAccessorGetSliceIouThreshold({
    required YoloModelSession that,
  });

  void crateApiModelYoloModelSessionAutoAccessorSetConfidenceThreshold({
    required YoloModelSession that,
    required double confidenceThreshold,
  });

  void crateApiModelYoloModelSessionAutoAccessorSetFinalMetric({
    required YoloModelSession that,
    required MatchMetric finalMetric,
  });

  void crateApiModelYoloModelSessionAutoAccessorSetFinalMetricThreshold({
    required YoloModelSession that,
    required double finalMetricThreshold,
  });

  void crateApiModelYoloModelSessionAutoAccessorSetSliceIouThreshold({
    required YoloModelSession that,
    required double sliceIouThreshold,
  });

  Future<YoloModelSession> crateApiModelYoloModelSessionFromMemory({
    required VecU8Wrapper bytes,
    required MatchMetric finalMetric,
    required double finalMetricThreshold,
    required double sliceIouThreshold,
    required double confidenceThreshold,
  });

  Future<List<YoloEntityOutput>> crateApiModelYoloModelSessionSlicedInference({
    required YoloModelSession that,
    required VecU8Wrapper image,
    required int imageWidth,
    required int imageHeight,
    required bool keepOriginal,
    required List<SliceInputParams> sliceOptions,
  });

  double crateApiUtilsBoundingBoxArea({required BoundingBox that});

  double crateApiUtilsBoundingBoxHeight({required BoundingBox that});

  double crateApiUtilsBoundingBoxIntersection({
    required BoundingBox that,
    required BoundingBox box2,
  });

  double crateApiUtilsBoundingBoxIos({
    required BoundingBox that,
    required BoundingBox box2,
  });

  double crateApiUtilsBoundingBoxIou({
    required BoundingBox that,
    required BoundingBox box2,
  });

  bool crateApiUtilsBoundingBoxIsValid({required BoundingBox that});

  double crateApiUtilsBoundingBoxMetric({
    required BoundingBox that,
    required BoundingBox box2,
    required MatchMetric metric,
  });

  BoundingBox crateApiUtilsBoundingBoxNew({
    required double x1,
    required double y1,
    required double x2,
    required double y2,
  });

  double crateApiUtilsBoundingBoxUnion({
    required BoundingBox that,
    required BoundingBox box2,
  });

  double crateApiUtilsBoundingBoxWidth({required BoundingBox that});

  Future<void> crateApiMainInitApp();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_YoloErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloModelSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloModelSession;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_YoloModelSessionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiErrorYoloErrorToString({required YoloError that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiErrorYoloErrorToStringConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiErrorYoloErrorToStringConstMeta =>
      const TaskConstMeta(
        debugName: "YoloError_to_string_",
        argNames: ["that"],
      );

  @override
  double crateApiModelYoloModelSessionAutoAccessorGetConfidenceThreshold({
    required YoloModelSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorGetConfidenceThresholdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorGetConfidenceThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_get_confidence_threshold",
        argNames: ["that"],
      );

  @override
  MatchMetric crateApiModelYoloModelSessionAutoAccessorGetFinalMetric({
    required YoloModelSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_match_metric,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorGetFinalMetricConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorGetFinalMetricConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_get_final_metric",
        argNames: ["that"],
      );

  @override
  double crateApiModelYoloModelSessionAutoAccessorGetFinalMetricThreshold({
    required YoloModelSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorGetFinalMetricThresholdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorGetFinalMetricThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_get_final_metric_threshold",
        argNames: ["that"],
      );

  @override
  double crateApiModelYoloModelSessionAutoAccessorGetSliceIouThreshold({
    required YoloModelSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorGetSliceIouThresholdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorGetSliceIouThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_get_slice_iou_threshold",
        argNames: ["that"],
      );

  @override
  void crateApiModelYoloModelSessionAutoAccessorSetConfidenceThreshold({
    required YoloModelSession that,
    required double confidenceThreshold,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          sse_encode_f_32(confidenceThreshold, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorSetConfidenceThresholdConstMeta,
        argValues: [that, confidenceThreshold],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorSetConfidenceThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_set_confidence_threshold",
        argNames: ["that", "confidenceThreshold"],
      );

  @override
  void crateApiModelYoloModelSessionAutoAccessorSetFinalMetric({
    required YoloModelSession that,
    required MatchMetric finalMetric,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          sse_encode_match_metric(finalMetric, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorSetFinalMetricConstMeta,
        argValues: [that, finalMetric],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorSetFinalMetricConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_set_final_metric",
        argNames: ["that", "finalMetric"],
      );

  @override
  void crateApiModelYoloModelSessionAutoAccessorSetFinalMetricThreshold({
    required YoloModelSession that,
    required double finalMetricThreshold,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          sse_encode_f_32(finalMetricThreshold, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorSetFinalMetricThresholdConstMeta,
        argValues: [that, finalMetricThreshold],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorSetFinalMetricThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_set_final_metric_threshold",
        argNames: ["that", "finalMetricThreshold"],
      );

  @override
  void crateApiModelYoloModelSessionAutoAccessorSetSliceIouThreshold({
    required YoloModelSession that,
    required double sliceIouThreshold,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          sse_encode_f_32(sliceIouThreshold, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiModelYoloModelSessionAutoAccessorSetSliceIouThresholdConstMeta,
        argValues: [that, sliceIouThreshold],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiModelYoloModelSessionAutoAccessorSetSliceIouThresholdConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_auto_accessor_set_slice_iou_threshold",
        argNames: ["that", "sliceIouThreshold"],
      );

  @override
  Future<YoloModelSession> crateApiModelYoloModelSessionFromMemory({
    required VecU8Wrapper bytes,
    required MatchMetric finalMetric,
    required double finalMetricThreshold,
    required double sliceIouThreshold,
    required double confidenceThreshold,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_vec_u_8_wrapper(bytes, serializer);
          sse_encode_match_metric(finalMetric, serializer);
          sse_encode_f_32(finalMetricThreshold, serializer);
          sse_encode_f_32(sliceIouThreshold, serializer);
          sse_encode_f_32(confidenceThreshold, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError,
        ),
        constMeta: kCrateApiModelYoloModelSessionFromMemoryConstMeta,
        argValues: [
          bytes,
          finalMetric,
          finalMetricThreshold,
          sliceIouThreshold,
          confidenceThreshold,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelYoloModelSessionFromMemoryConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_from_memory",
        argNames: [
          "bytes",
          "finalMetric",
          "finalMetricThreshold",
          "sliceIouThreshold",
          "confidenceThreshold",
        ],
      );

  @override
  Future<List<YoloEntityOutput>> crateApiModelYoloModelSessionSlicedInference({
    required YoloModelSession that,
    required VecU8Wrapper image,
    required int imageWidth,
    required int imageHeight,
    required bool keepOriginal,
    required List<SliceInputParams> sliceOptions,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
            that,
            serializer,
          );
          sse_encode_box_autoadd_vec_u_8_wrapper(image, serializer);
          sse_encode_u_32(imageWidth, serializer);
          sse_encode_u_32(imageHeight, serializer);
          sse_encode_bool(keepOriginal, serializer);
          sse_encode_list_slice_input_params(sliceOptions, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_yolo_entity_output,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError,
        ),
        constMeta: kCrateApiModelYoloModelSessionSlicedInferenceConstMeta,
        argValues: [
          that,
          image,
          imageWidth,
          imageHeight,
          keepOriginal,
          sliceOptions,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiModelYoloModelSessionSlicedInferenceConstMeta =>
      const TaskConstMeta(
        debugName: "YoloModelSession_sliced_inference",
        argNames: [
          "that",
          "image",
          "imageWidth",
          "imageHeight",
          "keepOriginal",
          "sliceOptions",
        ],
      );

  @override
  double crateApiUtilsBoundingBoxArea({required BoundingBox that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxAreaConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxAreaConstMeta =>
      const TaskConstMeta(debugName: "bounding_box_area", argNames: ["that"]);

  @override
  double crateApiUtilsBoundingBoxHeight({required BoundingBox that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxHeightConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxHeightConstMeta =>
      const TaskConstMeta(debugName: "bounding_box_height", argNames: ["that"]);

  @override
  double crateApiUtilsBoundingBoxIntersection({
    required BoundingBox that,
    required BoundingBox box2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(box2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxIntersectionConstMeta,
        argValues: [that, box2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxIntersectionConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_intersection",
        argNames: ["that", "box2"],
      );

  @override
  double crateApiUtilsBoundingBoxIos({
    required BoundingBox that,
    required BoundingBox box2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(box2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxIosConstMeta,
        argValues: [that, box2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxIosConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_ios",
        argNames: ["that", "box2"],
      );

  @override
  double crateApiUtilsBoundingBoxIou({
    required BoundingBox that,
    required BoundingBox box2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(box2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxIouConstMeta,
        argValues: [that, box2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxIouConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_iou",
        argNames: ["that", "box2"],
      );

  @override
  bool crateApiUtilsBoundingBoxIsValid({required BoundingBox that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxIsValidConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxIsValidConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_is_valid",
        argNames: ["that"],
      );

  @override
  double crateApiUtilsBoundingBoxMetric({
    required BoundingBox that,
    required BoundingBox box2,
    required MatchMetric metric,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(box2, serializer);
          sse_encode_match_metric(metric, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxMetricConstMeta,
        argValues: [that, box2, metric],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxMetricConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_metric",
        argNames: ["that", "box2", "metric"],
      );

  @override
  BoundingBox crateApiUtilsBoundingBoxNew({
    required double x1,
    required double y1,
    required double x2,
    required double y2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_f_32(x1, serializer);
          sse_encode_f_32(y1, serializer);
          sse_encode_f_32(x2, serializer);
          sse_encode_f_32(y2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bounding_box,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxNewConstMeta,
        argValues: [x1, y1, x2, y2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxNewConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_new",
        argNames: ["x1", "y1", "x2", "y2"],
      );

  @override
  double crateApiUtilsBoundingBoxUnion({
    required BoundingBox that,
    required BoundingBox box2,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          sse_encode_box_autoadd_bounding_box(box2, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxUnionConstMeta,
        argValues: [that, box2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxUnionConstMeta =>
      const TaskConstMeta(
        debugName: "bounding_box_union",
        argNames: ["that", "box2"],
      );

  @override
  double crateApiUtilsBoundingBoxWidth({required BoundingBox that}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_bounding_box(that, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_f_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiUtilsBoundingBoxWidthConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiUtilsBoundingBoxWidthConstMeta =>
      const TaskConstMeta(debugName: "bounding_box_width", argNames: ["that"]);

  @override
  Future<void> crateApiMainInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiMainInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiMainInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_YoloModelSession => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_YoloModelSession => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession;

  @protected
  YoloError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloModelSession
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloModelSession
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloError
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloModelSession
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  YoloModelSession
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BoundingBox dco_decode_bounding_box(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return BoundingBox.raw(
      x1: dco_decode_f_32(arr[0]),
      y1: dco_decode_f_32(arr[1]),
      x2: dco_decode_f_32(arr[2]),
      y2: dco_decode_f_32(arr[3]),
    );
  }

  @protected
  BoundingBox dco_decode_box_autoadd_bounding_box(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bounding_box(raw);
  }

  @protected
  VecU8Wrapper dco_decode_box_autoadd_vec_u_8_wrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vec_u_8_wrapper(raw);
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SliceInputParams> dco_decode_list_slice_input_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_slice_input_params).toList();
  }

  @protected
  List<YoloEntityOutput> dco_decode_list_yolo_entity_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_yolo_entity_output).toList();
  }

  @protected
  MatchMetric dco_decode_match_metric(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MatchMetric.values[raw as int];
  }

  @protected
  SliceInputParams dco_decode_slice_input_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SliceInputParams(
      sliceWidth: dco_decode_u_32(arr[0]),
      sliceHeight: dco_decode_u_32(arr[1]),
      overlapWidthRatio: dco_decode_f_32(arr[2]),
      overlapHeightRatio: dco_decode_f_32(arr[3]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VecU8Wrapper dco_decode_vec_u_8_wrapper(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return VecU8Wrapper(v: dco_decode_list_prim_u_8_strict(arr[0]));
  }

  @protected
  YoloEntityOutput dco_decode_yolo_entity_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return YoloEntityOutput(
      boundingBox: dco_decode_bounding_box(arr[0]),
      classId: dco_decode_u_8(arr[1]),
      confidence: dco_decode_f_32(arr[2]),
    );
  }

  @protected
  YoloError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloModelSession
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloModelSession
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloError
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloModelSession
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  YoloModelSession
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return YoloModelSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BoundingBox sse_decode_bounding_box(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x1 = sse_decode_f_32(deserializer);
    var var_y1 = sse_decode_f_32(deserializer);
    var var_x2 = sse_decode_f_32(deserializer);
    var var_y2 = sse_decode_f_32(deserializer);
    return BoundingBox.raw(x1: var_x1, y1: var_y1, x2: var_x2, y2: var_y2);
  }

  @protected
  BoundingBox sse_decode_box_autoadd_bounding_box(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bounding_box(deserializer));
  }

  @protected
  VecU8Wrapper sse_decode_box_autoadd_vec_u_8_wrapper(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vec_u_8_wrapper(deserializer));
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SliceInputParams> sse_decode_list_slice_input_params(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SliceInputParams>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_slice_input_params(deserializer));
    }
    return ans_;
  }

  @protected
  List<YoloEntityOutput> sse_decode_list_yolo_entity_output(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <YoloEntityOutput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_yolo_entity_output(deserializer));
    }
    return ans_;
  }

  @protected
  MatchMetric sse_decode_match_metric(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return MatchMetric.values[inner];
  }

  @protected
  SliceInputParams sse_decode_slice_input_params(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sliceWidth = sse_decode_u_32(deserializer);
    var var_sliceHeight = sse_decode_u_32(deserializer);
    var var_overlapWidthRatio = sse_decode_f_32(deserializer);
    var var_overlapHeightRatio = sse_decode_f_32(deserializer);
    return SliceInputParams(
      sliceWidth: var_sliceWidth,
      sliceHeight: var_sliceHeight,
      overlapWidthRatio: var_overlapWidthRatio,
      overlapHeightRatio: var_overlapHeightRatio,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VecU8Wrapper sse_decode_vec_u_8_wrapper(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_v = sse_decode_list_prim_u_8_strict(deserializer);
    return VecU8Wrapper(v: var_v);
  }

  @protected
  YoloEntityOutput sse_decode_yolo_entity_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_boundingBox = sse_decode_bounding_box(deserializer);
    var var_classId = sse_decode_u_8(deserializer);
    var var_confidence = sse_decode_f_32(deserializer);
    return YoloEntityOutput(
      boundingBox: var_boundingBox,
      classId: var_classId,
      confidence: var_confidence,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    YoloError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    YoloModelSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloModelSessionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    YoloModelSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloModelSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    YoloError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloErrorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    YoloModelSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloModelSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloError(
    YoloError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerYoloModelSession(
    YoloModelSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as YoloModelSessionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_bounding_box(BoundingBox self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.x1, serializer);
    sse_encode_f_32(self.y1, serializer);
    sse_encode_f_32(self.x2, serializer);
    sse_encode_f_32(self.y2, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bounding_box(
    BoundingBox self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bounding_box(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_vec_u_8_wrapper(
    VecU8Wrapper self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vec_u_8_wrapper(self, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_slice_input_params(
    List<SliceInputParams> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_slice_input_params(item, serializer);
    }
  }

  @protected
  void sse_encode_list_yolo_entity_output(
    List<YoloEntityOutput> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_yolo_entity_output(item, serializer);
    }
  }

  @protected
  void sse_encode_match_metric(MatchMetric self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_slice_input_params(
    SliceInputParams self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.sliceWidth, serializer);
    sse_encode_u_32(self.sliceHeight, serializer);
    sse_encode_f_32(self.overlapWidthRatio, serializer);
    sse_encode_f_32(self.overlapHeightRatio, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vec_u_8_wrapper(VecU8Wrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.v, serializer);
  }

  @protected
  void sse_encode_yolo_entity_output(
    YoloEntityOutput self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bounding_box(self.boundingBox, serializer);
    sse_encode_u_8(self.classId, serializer);
    sse_encode_f_32(self.confidence, serializer);
  }
}

@sealed
class YoloErrorImpl extends RustOpaque implements YoloError {
  // Not to be used by end users
  YoloErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  YoloErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_YoloError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloErrorPtr,
  );

  String toString() =>
      RustLib.instance.api.crateApiErrorYoloErrorToString(that: this);
}

@sealed
class YoloModelSessionImpl extends RustOpaque implements YoloModelSession {
  // Not to be used by end users
  YoloModelSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  YoloModelSessionImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_YoloModelSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_YoloModelSession,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_YoloModelSessionPtr,
  );

  double get confidenceThreshold => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorGetConfidenceThreshold(
        that: this,
      );

  MatchMetric get finalMetric => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorGetFinalMetric(that: this);

  double get finalMetricThreshold => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorGetFinalMetricThreshold(
        that: this,
      );

  double get sliceIouThreshold => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorGetSliceIouThreshold(
        that: this,
      );

  set confidenceThreshold(double confidenceThreshold) => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorSetConfidenceThreshold(
        that: this,
        confidenceThreshold: confidenceThreshold,
      );

  set finalMetric(MatchMetric finalMetric) => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorSetFinalMetric(
        that: this,
        finalMetric: finalMetric,
      );

  set finalMetricThreshold(double finalMetricThreshold) => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorSetFinalMetricThreshold(
        that: this,
        finalMetricThreshold: finalMetricThreshold,
      );

  set sliceIouThreshold(double sliceIouThreshold) => RustLib.instance.api
      .crateApiModelYoloModelSessionAutoAccessorSetSliceIouThreshold(
        that: this,
        sliceIouThreshold: sliceIouThreshold,
      );

  Future<List<YoloEntityOutput>> slicedInference({
    required VecU8Wrapper image,
    required int imageWidth,
    required int imageHeight,
    required bool keepOriginal,
    required List<SliceInputParams> sliceOptions,
  }) => RustLib.instance.api.crateApiModelYoloModelSessionSlicedInference(
    that: this,
    image: image,
    imageWidth: imageWidth,
    imageHeight: imageHeight,
    keepOriginal: keepOriginal,
    sliceOptions: sliceOptions,
  );
}
